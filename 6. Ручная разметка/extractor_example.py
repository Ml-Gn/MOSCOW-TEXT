#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Предположим, что в ручной разметке (файл markup.txt) сущность выделяется
# с помощью решетки (#), поставленной перед именем: 
#
# А в Москве, на #Кузнецком мосту
# Решетка удобна тем, что не используется в большинстве старых текстов
# на естественном языке в отличие от & и др. К тому же это один символ,
# а не XML-тег типа <entity>, который потребовал бы усложнения кода.
# Минус в том, что такая разметка визуально хуже опознается, чем тег.


def main():
    starting_positions = [] # сюда будем записывать все позиции символов,
                            # с которых начинается наша сущность
    
    with open('markup.txt') as f:
        text = f.read()
    
    # В принципе, для наших задач достаточно начальной позиции, конечную
    # искать не будем.
    
    counter = 0 # будем считать символы, начиная с единицы. Чтобы сработало,
                # нужно убедиться, что у natasha/SpaCy тоже так. Если не
                # так, то сделать на это поправку
    
    for symbol in text: # читаем в цикле по одному символу из строки
        if symbol == '#':
            starting_positions.append(counter)  # записываем позицию,
                                                # счетчик НЕ увеличиваем
        else:
            counter += 1
            
    print(starting_positions)
        
    # Bonus! Как достать само слово после решетки из текста?
    
    # Шаг 1: убираем все решетки, чтобы не сбивали нумерацию:
    
    text = text.replace('#', '')
    
    # Шаг второй: разрезаем текст на две части по нашей позиции:
    
    position = starting_positions[0]
    text_from_position = text[position:]
    
    # Шаг третий: разбиваем оставшуюся нам часть текста на слова по пробелам
    
    words = text_from_position.split()
    
    # Шаг четвертый: берем первое слово (многословные сущности не отобразятся
    # корректно, но нам сейчас это и не требуется:
    
    entity = words[0]
    
    # Если поместить это в цикл по starting_positions, то можно найти все
    # слова
    
    print(entity)
    
    return 0

if __name__ == '__main__':
    main()
